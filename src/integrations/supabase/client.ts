
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://oirorkrrvxumhjhvrucm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9pcm9ya3Jydnh1bWhqaHZydWNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMxOTEyNDUsImV4cCI6MjA1ODc2NzI0NX0.HGmW3Sk-iAMvjWUAaAXD4DWwN_aFulsckAHuNPCU0yU";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: typeof window !== 'undefined' ? localStorage : undefined
    },
    global: {
      headers: {
        'Content-Type': 'application/json',
      },
    },
    db: {
      schema: 'public',
    },
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  }
);

// Modified helper function to check connection to Supabase
// that can bypass RLS policy issues with the user_roles table
export const pingDatabase = async () => {
  try {
    // Use a simple table that doesn't have complex RLS policies
    // "company_info" is a good choice since it generally has minimal security constraints
    const { data, error } = await supabase
      .from('company_info')
      .select('id')
      .limit(1);
      
    // If we get a specific RLS recursion error with user_roles, we'll handle it gracefully
    if (error && error.message && error.message.includes("infinite recursion") && error.message.includes("user_roles")) {
      console.warn("Known RLS policy issue detected:", error.message);
      // Return partial success - we know the DB is up, but has policy configuration issues
      return { 
        ok: true, 
        latency: 0, 
        warning: "Database accessible but has RLS policy configuration issues" 
      };
    }
    
    // Handle any other errors
    if (error) {
      console.error("Database ping failed:", error);
      return { ok: false, latency: 0, error: error.message };
    }
    
    return { ok: true, latency: 0 };
  } catch (err) {
    console.error("Unexpected error during database ping:", err);
    return { ok: false, latency: 0, error: err instanceof Error ? err.message : 'Unknown error' };
  }
};

// Helper function to check if we have an active session
export const getSession = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    if (error) {
      console.error("Error getting session:", error);
      return null;
    }
    return data.session;
  } catch (error) {
    console.error("Unexpected error getting session:", error);
    return null;
  }
};

// Helper function to get the current user
export const getCurrentUser = async () => {
  try {
    const { data, error } = await supabase.auth.getUser();
    if (error) {
      console.error("Error getting user:", error);
      return null;
    }
    return data.user;
  } catch (error) {
    console.error("Unexpected error getting user:", error);
    return null;
  }
};
